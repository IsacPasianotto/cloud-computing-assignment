image:
  # ref: https://hub.docker.com/r/library/nextcloud/tags/
  repository: nextcloud
  flavor: fpm
  tag:
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
deploymentAnnotations: {}
deploymentLabels: {}

replicaCount: 1

# Possible improvements: 
# ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
    nginx.ingress.kubernetes.io/proxy-body-size: 4G
    kubernetes.io/tls-acme: "true"
    cert-manager.io/issuer: "selfsigned"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/server-snippet: |-
       server_tokens off;
       proxy_hide_header X-Powered-By;

       rewrite ^/.well-known/webfinger /public.php?service=webfinger last;
       rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
       rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
       location = /.well-known/carddav {
         return 301 $scheme://$host/remote.php/dav;
       }
       location = /.well-known/caldav {
         return 301 $scheme://$host/remote.php/dav;
       }
       location = /robots.txt {
         allow all;
         log_not_found off;
         access_log off;
       }
       location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
         deny all;
       }
       location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
         deny all;
       }
  className: nginx
  path: / 
  hosts:
    - nextcloud.example.com
  servicePort: https
  tls:
    - secretName: nextcloud-tls
      hosts:
        - nextcloud.example.com
  
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
lifecycle: {}
  # postStartCommand: []
  # preStopCommand: []

phpClientHttpsFix:
  enabled: true
  protocol: https

nextcloud:
  host: nextcloud.example.com
  existingSecret:
    enabled: true
    secretName: nextcloud-credentials
    usernameKey: username
    passwordKey: password
    tokenKey: nextcloud-token
  update: 0
  # If web server is not binding default port, you can define it
  # containerPort: 80
  datadir: /var/www/html/data

  persistence:
    enabled: true
    existingClaim: nextcloud-claim
    accessMode: ReadWriteOnce
    size: 5Gi
    # subPath:
  mail:
    enabled: false
    
  # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
  phpConfigs: {}
  defaultConfigs:
    .htaccess: true                         # To protect /var/www/html/config
    redis.config.php: true                  # Redis default configuration
    apache-pretty-urls.config.php: true     # Apache configuration for rewrite urls
    apcu.config.php: true                   # Default APCu as local cache
    apps.config.php: true                   # Apps directory configs
    autoconfig.php: true                    # Used for auto configure database
    smtp.config.php: true                   # SMTP default configuration
  
  configs: {}                               # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file

  # Small scripts which are placed in `/docker-entrypoint-hooks.d/<hook-name>/helm.sh`
  # ref: https://github.com/nextcloud/docker?tab=readme-ov-file#auto-configuration-via-hook-folders
  hooks:
    pre-installation:
    post-installation:
    pre-upgrade:
    post-upgrade:
    before-starting:

  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: Recreate

  ##
  ## Extra environment variables
  # extraEnv:
  
  extraInitContainers: []
  extraSidecarContainers: []
  extraVolumes:
  #  - name: nfs
  #    nfs:
  #      server: "10.0.0.1"
  #      path: "/nextcloud_data"
  #      readOnly: false
  extraVolumeMounts:
  #  - name: nfs
  #    mountPath: "/legacy_data"

nginx:
  ## You need to set an fpm version of the image for nextcloud if you want to use nginx
  enabled: true
  image:
    repository: nginx
    tag: alpine
    pullPolicy: IfNotPresent
  containerPort: 80
  config:
    default: true
  resources: {}

internalDatabase:
  enabled: false

externalDatabase:
  enabled: true
  type: postgresql # mysql or postgresql
  host: localhost:5432
  existingSecret:
    enabled: true
    secretName: postgres-credentials
    usernameKey: db-user
    passwordKey: db-password
    rootPasswordKey: db-root-password
    databaseKey: db-name
    hostKey: db-host

postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        existingSecret: postgres-credentials
        secretKeys:
          usernameKey: db-user
          adminPasswordKey: db-root-password
          userPasswordKey: db-password
          databaseKey: db-name
          hostKey: db-host
  primary:
    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      existingClaim: postgres-claim
      size: 5Gi
     

# Ref:  https://github.com/bitnami/charts/tree/main/bitnami/redis
redis:
  enabled: true
  auth:
    enabled: true
    existingSecret: redis-credentials
    existingSecretPasswordKey: redis-password
  # in 1 node, standalone architecture is fine
  architecture: "standalone"
  master:
    enabled: true
    persistence:
      enabled: false
    replicas: 0
  replica:
    enabled: false
    persistence:
      enabled: false
    replicas: 0
 



## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
cronjob:
  enabled: true
  resources: {}
  lifecycle: {}
  securityContext: {}


service:
  type: LoadBalancer
  port: 8080
  externalTrafficPolicy: Local
  annotations:
    metallb.universe.tf/address-pool: ip-addr-pool



## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
persistence:
  enabled: true
  annotations: {}
  existingClaim: nextcloud-claim
  accessMode: ReadWriteOnce
  size: 5Gi

  ## Use an additional pvc for the data directory rather than a subpath of the default PVC
  ## Useful to store data on a different storageClass (e.g. on slower disks)
  nextcloudData:
    enabled: false

resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi


## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1


## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
hpa:
  enabled: true
  cputhreshold: 60
  minPods: 1
  maxPods: 10


nodeSelector: {}
tolerations: []
affinity: {}


## Prometheus Exporter / Metrics
##
metrics:
  enabled: true

  replicaCount: 1
  https: false
  # Use API token if set, otherwise fall back to password authentication
  # https://github.com/xperimental/nextcloud-exporter#token-authentication
  # Currently you still need to set the token manually in your nextcloud install
  token: ""
  timeout: 5s
  # if set to true, exporter skips certificate verification of Nextcloud server.
  tlsSkipVerify: false
  image:
    repository: xperimental/nextcloud-exporter
    tag: 0.6.2
    pullPolicy: IfNotPresent
  resources: {}
  podAnnotations: {}
  podLabels: {}

  service:
    type: LoadBalancer
    loadBalancerIP:
    annotations:
      prometheus.io/scrape: "false"
      prometheus.io/path: "/metrics"
      prometheus.io/scheme: "http"
      prometheus.io/port: "9205"
    labels: {}

  ServiceMonitor:
    enabled: true
    namespace: nextcloud
    namespaceSelector: nextcloud
    interval: 30s
    scrapeTimeout: ""
    labels: {}

rbac:
  enabled: false
  serviceaccount:
    create: true
    name: nextcloud-serviceaccount
    annotations: {}